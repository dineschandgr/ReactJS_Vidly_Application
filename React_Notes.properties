#React

- only the view layer
- creates a virtual DOM and updates the browser DOM only when there is change in Virtual DOM

#React Package

1. Development Server
2. Webpack - to bundle the files
3. Babel - modern javascript compiler to compile javascript code

#JSX

- Javascript XML
- Components use JSX
- Babel compiles JSX code to call React.createElement.

#Render

- we render the components inside the DOM
- App component is the root component for the children


#ES6 Components

#ECMAScript6 (ES6) - launched in 2015

# 1. var, let, const

# var -> function
- variables with var can be accessed anywhere in the function. 
- even variables declared inside loop can be accessed inside the function

# let -> block
 - let came to solve the scope problem. 
  
# const -> block
- to define constant
- constant variable cannot be changed once assigned


# 2. Objects

- Collection of key value pairs
- Object with variables and methods
- walk and talk are methods
- function is an object in java script

------------------------------------------
const person = {
    name : "dc",
    walk: function() {},
    talk() {}
};

person.talk();

ways to access variables

1. person.name = 'John';
2. person['name'] = 'John';

-------------------------------------------

# 3. this keyword

- returns the reference of object when called using object instance
- when a method call is made without object, it references the current window object

#strict mode

- if strict mode is enabled, then the window object cannot be accessed
- it is a protective way to execute java script

# 4. Binding

- set the value of this permanently
- binding the parameter to the method

- eg : 

const walk = person.walk.bind(person);
walk();


#5. Arrow Functions

- like java lambda

eg:

const square = function(number){
  return number * number;
}

const square = number => number * number;
console.log(square(5));

const jobs = [
    {id : 1, isActive:true},
    {id : 2, isActive:true},
    {id : 3, isActive:false}
]

const activeJobs = jobs.filter(function(job) {
    return job.isActive;
});

console.log(activeJobs);


#6. Array.map

- to render a list

#template literal

- place holders
 `<li>${color}</li>`

const colors = ['red','green','blue'];
const items = colors.map(color => `<li>${color}</li>`);
console.log(items);

#7. Object Destructuring

- assigning properties of objects to the new variables

const address = {
    street: '',
    city: '',
    country: ''
};

const street = address.street;
const city = address.city;
const country = address.country;

const { street, city, country} = address;

#alias
const { street: st} = address;

#8. Spread Operator

- to combine arrays
- we can append elements
- we can clone arrays
- we can clone objects

const first = [1,2,3];
const second = [1,2,3];

const combined = first.concat(second);
const combined = [...first, ...second];
const combined = [...first,'a' ...second, 'b'];
const clone = [...first];

#9. Classes

- blueprint for objects

class Person {    
    constructor(name){
        this.name = name;
    }
    
    walk(){
        console.log("walk");
    }
}

const person1 = new Person('DC');

#10. Inheritance

- Extending parent class / components

class Teacher extends Person{

    constructor(name, degree){
        super(name);
        this.degree = degree;
    }

    teach(){
        console.log("teach");
    }
}

#11. Modules

- each file is a module
- classes in a module are private by default and hence not visible outside
- use export class keyword to export class
- use import keyword to import class
import {Teacher} from './teacher';


#12. Named and Default Exports

- exporting one or more objects from a module
- Class is also an object in java script

#Default -> import ... from '';
#Named -> import {...} from '';


-------------------------------------------------------------------------------------------------
#Components

#1. Components

- jsx gives better code completion
- react components must have a parent when we have more than one elements
#React.Fragment

- if we dont need to use an extra div to place multiple components

#2. Expressions

- Something that produces value

#3. ClassName

 <span className="badge badge-primary m-2">{this.formatCount()}</span>
 <button className="btn btn-secondary btn-sm">Increment</button>
 
 #style
 
 - to apply style only for specific elements
 
 <span style = "{this.styles}" className="badge badge-primary m-2">{this.formatCount()}</span>
 
#4. Rendering Lists

- to render array values using ul and li

<ul>
	  {this.state.tags.map((tag) => (
		<li key={tag}>{tag}</li>
	  ))}
</ul>

#5. Conditional Rendering

- no if else statements in jsx
- java script engine returns trucy or falsy based on the condition

#trucy if list size != 0
#falsy if list size == 0
{this.state.tags.length == 0 && "Please create a new tag"}

#6. Binding Event handlers

- bind the this in constructor
- but we have to rebind every event handler

 constructor() {
    super();
    this.handleIncrement = this.handleIncrement.bind(this);
  }
  
- we can also use arrow functions to bind this. it inherits the this. it is easy to use

  handleIncrement = () => {
    console.log("Increment Clicked", this.state.count);
  };
  
#7. State Changes

- Every time when we update a state, we have to use setState method of react

this.setState({ count: this.state.count + 1 });

- React will everytime compare the virtualk DOM with real DOM and only updates the elements which have change

#8. Passing Event Arguments

- 


--------------------------------------------------------------------------------------------------------------------

#Composing Components

#props

- react properties for every react element

console.log('props', this.props);

#Children

{this.props.children}
 
- to pass complex components to child dialog box

#Debug React Tools

- to debug using $0 in console after selecting an element

#Props vs State

- Props include that is given to the component
- State includes data that is local to the component
- State is internal to the component
- Props is ready only 

# Raising and Handling Events 

- The component that owns a piece of the state should be the one modifying it

- Child component will raise the event and parent component will handle the event

- Used in lot of real world applications

- key and id are different. We cannot access key props of react as it is used internally

#Single Source of Truth

- each component has its own local state
- so the state cannot be used by another component

#Controlled Components

- no local state and it gets it data from the props
- it raises event when data needs to be changed

#Lifting the state up

- When there is no parent child relationship between components, we lift the state up to the parent
- eg: Counters -> counter . counters component hold the state of counter

NavBar has no access to the state of counter. So the counter state is lifted from counters to App component
Now Navbar component has access to counter state


#Stateless Functional Components

- convert a stateless component to functions
- use a function instead of class
- we need to add props as an argument
- we need to remove this reference

#Destructuring Props Arguments

- instead of repeating props, we can destructure it
const { onReset, counters, onDelete, onIncrement } = this.props;

#LifeCycle Hooks

- components go through the following phases during the lifecycle

# 1. Mounting Phase

- instance of the component is created and inserted into DOM
- to hook in and do certain things
- these methods will be called in order

1. Constructor
2. render

 - when a component is rendered, all its children are rendered recursively
 
3. componentDidMount

#. 2. Update

- Called when props or state of a component  gets changed

1. Render
2. componentDidUpdate

- call backend server if there is an update in the value

# 3. Unmounting Phase

- When a component is removed from DOM

1. componentWillUnMount

- clean up before component is unmounted


--------------------------------------------------------------------------------------------------------------------

#Pagination, Sorting and Filtering

#lodash

- a javascript library with utility functions
- create a pagination component and raise an event to movie class
import _ from "lodash";

#typeChecking

- library to be imported for type checking
import PropTypes from "prop-types";

#PropTypes

- to catch bugs related to type check in resuable components
- also a documentation to know about the data types of a component

Pagination.propTypes = {
  itemsCount: PropTypes.number.isRequired,
  pageSize: PropTypes.number.isRequired,
  currentPage: PropTypes.number.isRequired,
  onPageChange: PropTypes.func.isRequired,
};

#BootStrap List Group

- created new component pagination.jsx
- created new component ListGroup.jsx

Order of functionality is

1. Filtering
2. Sorting
3. Paginate

--------------------------------------------------------------------------------------------------------------------

#Routing

#react-router-dom

- to add routing to react
- if the path matches the url, the component is rendered

#Switch

- renders only the first child that matches the path
- order the routes from specific to generic
- switch reloads the entire page everytime

#Link

 <Link to="/">Home</Link>
 
- all components are in bundle.js
- no new requests. page not reloaded
- uses handlers internally and lods only the new component

#NavLink

- to highlight the selected link

#Route Props

- by default 3 props are inserted into the component
- history,location and match

#Passing Props

- we have to use render instead of component
-   <Route path="/products"
     render={(props) => <Products sortBy="newest" {...props} />}
   />
   
#Route Params

- match object has route params
 <Route path="/products/:id" Component={ProductDetails} />
 
#Optional Params

 <Route path="/posts/:year?/:month?" component={Posts} />

  Year: {match.params.year}, Month: {match.params.month}
  
#Query Strings

- using ?
- present in location props

#Redirects

<Redirect to="/not-found" />  

#Nested Routing

--------------------------------------------------------------------------------------------------------------------

#Forms

#Ref

- to refer to the DOM element

username = React.createRef();
<input
  ref={this.userName}
  id="userName"
  type="text"
  className="form-control"
/>
 
- minimize use of REFs

#ControlledElements

- they get data from props and notify changes to data by raising events
- single source of truth

#Common Errors

- Always initialise the properties of state object to empty string or value from server
- null and undefined cannot be used

#Extracting a Resuable Input

#Validation on change

#joi

- a powerful library for validation

 schema = {
    username: Joi.string().required().label("UserName"),
    password: Joi.string().required().label("Password"),
  };
  
--------------------------------------------------------------------------------------------------------------------

#Calling Backend Services

#JSONPlaceholder

- Free to use fake online REST API for testing and prototyping.

#HTTPClients

- we can choose our own HTTP libraries

1. Fetch API
2. jQuery AJAX
3. Axios

#Promise

- holds the result of an async operation
- delay in response.
- promise object promises to hold result of an async operation

 const { data: posts } = await axios.get(
      "https://jsonplaceholder.typicode.com/posts"
    );

#await

- the method should be async
- The await operator is used to wait for a Promise. It can only be used inside an async function.

#Options

- if client and server are in different domains, then the server send OPTIONS request for security purpose.

#Pessimistic Update

- Call server, then update the UI with response

#Optimistic Update

- Update UI and then call server
- If response fails, then revert UI

#Expected Errors vs Unexpected Errors

#try catch

ex.request
ex.repsonse

#Interceptor

- to intercept the errors

#Toast Notifications

- to display error notifications

#Logging as service provider

#Sentry

- also gives the story about the errors and exceptions which are logged
- need to install Raven.js

--------------------------------------------------------------------------------------------------------------------

#Authentication and Authorization

#localstorage

- a small database in browser to store key value pairs
localStorage.setItem('token', jwt);

Application -> Storage -> Local Storage

JWT can be sent by server in body or header (custom headers)
need to set in server so that client can access
.header("access-control-expose-headers", "x-auth-token")

#Bi-Directional Dependencies

- cyclic dependency between 2 modules
- should be avoided

#ProtectedRoute

- This tag is aware of the current userName

--------------------------------------------------------------------------------------------------------------------

#Environment Variables

.en file
- every environment will gets its own .en file

npm start has additional code for debugging during development

#Optimized Prod Build

npm run build